diff --git a/arch/arm/mach-omap2/omap5/hw_data.c b/arch/arm/mach-omap2/omap5/hw_data.c
index e6bee48dfc..c32cdf69f7 100644
--- a/arch/arm/mach-omap2/omap5/hw_data.c
+++ b/arch/arm/mach-omap2/omap5/hw_data.c
@@ -806,7 +806,7 @@ const struct ctrl_ioregs ioregs_dra72x_es2 = {
 
 void __weak hw_data_init(void)
 {
-	u32 omap_rev = omap_revision();
+	u32 omap_rev = DRA752_ES2_0;//omap_revision();
 
 	switch (omap_rev) {
 
@@ -855,9 +855,9 @@ void __weak hw_data_init(void)
 	}
 }
 
-void get_ioregs(const struct ctrl_ioregs **regs)
+void __weak get_ioregs(const struct ctrl_ioregs **regs)
 {
-	u32 omap_rev = omap_revision();
+	u32 omap_rev = DRA752_ES2_0;//omap_revision();
 
 	switch (omap_rev) {
 	case OMAP5430_ES1_0:
diff --git a/board/ti/am57xx/board.c b/board/ti/am57xx/board.c
index 4fd452b050..928143fa45 100644
--- a/board/ti/am57xx/board.c
+++ b/board/ti/am57xx/board.c
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0+
+// SPDX-License-Identifier: GPL-2.0
 /*
  * Copyright (C) 2014 Texas Instruments Incorporated - http://www.ti.com
  *
@@ -48,19 +48,19 @@
 static int board_bootmode_has_emmc(void);
 #endif
 
-#define board_is_x15()		board_ti_is("BBRDX15_")
-#define board_is_x15_revb1()	(board_ti_is("BBRDX15_") && \
+#define board_is_x15()		0//board_ti_is("BBRDX15_")
+#define board_is_x15_revb1()	0//(board_ti_is("BBRDX15_") && \
 				 !strncmp("B.10", board_ti_get_rev(), 3))
-#define board_is_x15_revc()	(board_ti_is("BBRDX15_") && \
+#define board_is_x15_revc()	0//(board_ti_is("BBRDX15_") && \
 				 !strncmp("C.00", board_ti_get_rev(), 3))
-#define board_is_am572x_evm()	board_ti_is("AM572PM_")
-#define board_is_am572x_evm_reva3()	\
+#define board_is_am572x_evm()	0//board_ti_is("AM572PM_")
+#define board_is_am572x_evm_reva3()	0//\
 				(board_ti_is("AM572PM_") && \
 				 !strncmp("A.30", board_ti_get_rev(), 3))
-#define board_is_am574x_idk()	board_ti_is("AM574IDK")
-#define board_is_am572x_idk()	board_ti_is("AM572IDK")
-#define board_is_am571x_idk()	board_ti_is("AM571IDK")
-#define board_is_bbai()		board_ti_is("BBONE-AI")
+#define board_is_am574x_idk()	0//board_ti_is("AM574IDK")
+#define board_is_am572x_idk()	0//board_ti_is("AM572IDK")
+#define board_is_am571x_idk()	0//board_ti_is("AM571IDK")
+#define board_is_bbai()		1//board_ti_is("BBONE-AI")
 
 #define board_is_ti_idk()	board_is_am574x_idk() || \
 				board_is_am572x_idk() || \
@@ -97,6 +97,15 @@ const struct omap_sysinfo sysinfo = {
 	"Board: UNKNOWN(BeagleBoard X15?) REV UNKNOWN\n"
 };
 
+const struct ctrl_ioregs AM572x_DDR3L_532MHz_TI_AM572x_IDK_ctrl_ioregs = {
+    .ctrl_ddr3ch = 0x80808080,			
+    .ctrl_ddrch = 0x40404040,			
+    .ctrl_ddrio_0 = 0x00094A40,			
+    .ctrl_ddrio_1 = 0x04A52000,			
+    .ctrl_lpddr2ch = 0x00404000,			
+    .ctrl_emif_sdram_config_ext = 0x0002C123
+};
+
 static const struct dmm_lisa_map_regs beagle_x15_lisa_regs = {
 	.dmm_lisa_map_3 = 0x80740300,
 	.is_ma_present  = 0x1
@@ -114,9 +123,17 @@ static const struct dmm_lisa_map_regs am574x_idk_lisa_regs = {
 };
 
 static const struct dmm_lisa_map_regs bbai_lisa_regs = {
-	.dmm_lisa_map_3 = 0x80640100,
-	.is_ma_present  = 0x1
-};
+	.dmm_lisa_map_0 = 0x00000000,			
+    .dmm_lisa_map_1 = 0x00000000,			
+    .dmm_lisa_map_2 = 0x80600100,			
+    .dmm_lisa_map_3 = 0xFF020100,			
+    .is_ma_present = 0x1
+ };
+
+void get_ioregs(const struct ctrl_ioregs **regs)
+{
+	*regs = &AM572x_DDR3L_532MHz_TI_AM572x_IDK_ctrl_ioregs;
+} 
 
 void emif_get_dmm_regs(const struct dmm_lisa_map_regs **dmm_lisa_regs)
 {
@@ -155,6 +172,45 @@ static const struct emif_regs beagle_x15_emif1_ddr3_532mhz_emif_regs = {
 	.emif_rd_wr_exec_thresh		= 0x00000305
 };
 
+const unsigned int AM572x_DDR3L_532MHz_TI_AM572x_BB_emif1_ext_phy_regs [] = {           
+    0x04040100, /* EMIF1_EXT_PHY_CTRL_1 */      
+    0x006B008C, /* EMIF1_EXT_PHY_CTRL_2 */      
+    0x006B008B, /* EMIF1_EXT_PHY_CTRL_3 */      
+    0x006B006B, /* EMIF1_EXT_PHY_CTRL_4 */      
+    0x006B006B, /* EMIF1_EXT_PHY_CTRL_5 */      
+    0x006B006B, /* EMIF1_EXT_PHY_CTRL_6 */      
+    0x00320032, /* EMIF1_EXT_PHY_CTRL_7 */      
+    0x00320032, /* EMIF1_EXT_PHY_CTRL_8 */      
+    0x00320032, /* EMIF1_EXT_PHY_CTRL_9 */      
+    0x00320032, /* EMIF1_EXT_PHY_CTRL_10 */     
+    0x00320032, /* EMIF1_EXT_PHY_CTRL_11 */     
+    0x00600065, /* EMIF1_EXT_PHY_CTRL_12 */     
+    0x00600066, /* EMIF1_EXT_PHY_CTRL_13 */     
+    0x00600060, /* EMIF1_EXT_PHY_CTRL_14 */     
+    0x00600060, /* EMIF1_EXT_PHY_CTRL_15 */     
+    0x00600060, /* EMIF1_EXT_PHY_CTRL_16 */     
+    0x00400045, /* EMIF1_EXT_PHY_CTRL_17 */     
+    0x00400046, /* EMIF1_EXT_PHY_CTRL_18 */     
+    0x00400040, /* EMIF1_EXT_PHY_CTRL_19 */     
+    0x00400040, /* EMIF1_EXT_PHY_CTRL_20 */     
+    0x00400040, /* EMIF1_EXT_PHY_CTRL_21 */     
+    0x00800080, /* EMIF1_EXT_PHY_CTRL_22 */     
+    0x00800080, /* EMIF1_EXT_PHY_CTRL_23 */     
+    0x40010080, /* EMIF1_EXT_PHY_CTRL_24 */     
+    0x08102040, /* EMIF1_EXT_PHY_CTRL_25 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_26 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_27 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_28 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_29 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_30 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_31 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_32 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_33 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_34 */     
+    0x00000000, /* EMIF1_EXT_PHY_CTRL_35 */     
+    0x00000077  /* EMIF1_EXT_PHY_CTRL_36 */     
+};
+
 /* Ext phy ctrl regs 1-35 */
 static const u32 beagle_x15_emif1_ddr3_ext_phy_ctrl_const_regs[] = {
 	0x10040100,
@@ -310,6 +366,29 @@ static const struct emif_regs am574x_emif1_ddr3_666mhz_emif_ecc_regs = {
 	.emif_ecc_address_range_2	= 0x00000000
 };
 
+static const struct emif_regs AM572x_DDR3L_532MHz_TI_AM572x_IDK_emif_regs = {
+    .sdram_config_init = 0x61877BB2,			
+    .sdram_config = 0x61877BB2,			
+    .sdram_config2 = 0x00000000,			
+    .ref_ctrl = 0x000040F1,			
+    .ref_ctrl_final = 0x00001035,			
+    .sdram_tim1 = 0xCEEF266B,			
+    .sdram_tim2 = 0x30BF7FDA,			
+    .sdram_tim3 = 0x407F8BA8,			
+    .read_idle_ctrl = 0x00050000,			
+    .zq_config = 0x5007190B,			
+    .temp_alert_config = 0x00000000,			
+    .emif_rd_wr_lvl_rmp_ctl = 0x80000000,			
+    .emif_rd_wr_lvl_ctl = 0x00000000,			
+    .emif_ddr_phy_ctlr_1_init = 0x0024400F,			
+    .emif_ddr_phy_ctlr_1 = 0x0E24400F,			
+    .emif_rd_wr_exec_thresh = 0x00000305,				
+    .emif_ecc_ctrl_reg = 0x00000000,			
+    .emif_ecc_address_range_1 = 0x3FFF0000,			
+    .emif_ecc_address_range_2 = 0x00000000
+
+};
+
 void emif_get_reg_dump(u32 emif_nr, const struct emif_regs **regs)
 {
 	switch (emif_nr) {
@@ -319,14 +398,14 @@ void emif_get_reg_dump(u32 emif_nr, const struct emif_regs **regs)
 		else if (board_is_am574x_idk())
 			*regs = &am574x_emif1_ddr3_666mhz_emif_ecc_regs;
 		else
-			*regs = &beagle_x15_emif1_ddr3_532mhz_emif_regs;
+			*regs = &AM572x_DDR3L_532MHz_TI_AM572x_IDK_emif_regs;
 		break;
-	case 2:
+	/*case 2:
 		if (board_is_am574x_idk())
 			*regs = &am571x_emif1_ddr3_666mhz_emif_regs;
 		else
 			*regs = &beagle_x15_emif2_ddr3_532mhz_emif_regs;
-		break;
+		break;*/
 	}
 }
 
@@ -334,13 +413,13 @@ void emif_get_ext_phy_ctrl_const_regs(u32 emif_nr, const u32 **regs, u32 *size)
 {
 	switch (emif_nr) {
 	case 1:
-		*regs = beagle_x15_emif1_ddr3_ext_phy_ctrl_const_regs;
-		*size = ARRAY_SIZE(beagle_x15_emif1_ddr3_ext_phy_ctrl_const_regs);
+		*regs = AM572x_DDR3L_532MHz_TI_AM572x_BB_emif1_ext_phy_regs;
+		*size = ARRAY_SIZE(AM572x_DDR3L_532MHz_TI_AM572x_BB_emif1_ext_phy_regs);
 		break;
-	case 2:
+	/*case 2:
 		*regs = beagle_x15_emif2_ddr3_ext_phy_ctrl_const_regs;
 		*size = ARRAY_SIZE(beagle_x15_emif2_ddr3_ext_phy_ctrl_const_regs);
-		break;
+		break;*/
 	}
 }
 
@@ -575,7 +654,7 @@ void do_board_detect(void)
 
 	if (bname)
 		snprintf(sysinfo.board_string, SYSINFO_BOARD_NAME_MAX_LEN,
-			 "Board: %s REV %s\n", bname, board_ti_get_rev());
+			 "Board: %s REV %s\n", bname, "1"/*board_ti_get_rev()*/);
 }
 
 static void setup_board_eeprom_env(void)
@@ -781,11 +860,11 @@ int board_late_init(void)
 	/* Just probe the potentially supported cdce913 device */
 	uclass_get_device(UCLASS_CLK, 0, &dev);
 
-	if (board_is_bbai())
+	if (board_is_bbai()||board_is_am572x_evm())
 		env_set("console", "ttyS0,115200n8");
 
 #if !defined(CONFIG_SPL_BUILD)
-	board_ti_set_ethaddr(2);
+	//board_ti_set_ethaddr(2);
 #endif
 
 #if CONFIG_IS_ENABLED(DM_USB) && CONFIG_IS_ENABLED(OF_CONTROL)
@@ -957,16 +1036,16 @@ int spl_start_uboot(void)
 #ifdef CONFIG_DRIVER_TI_CPSW
 
 /* Delay value to add to calibrated value */
-#define RGMII0_TXCTL_DLY_VAL		((0x3 << 5) + 0x8)
-#define RGMII0_TXD0_DLY_VAL		((0x3 << 5) + 0x8)
-#define RGMII0_TXD1_DLY_VAL		((0x3 << 5) + 0x2)
-#define RGMII0_TXD2_DLY_VAL		((0x4 << 5) + 0x0)
-#define RGMII0_TXD3_DLY_VAL		((0x4 << 5) + 0x0)
-#define VIN2A_D13_DLY_VAL		((0x3 << 5) + 0x8)
-#define VIN2A_D17_DLY_VAL		((0x3 << 5) + 0x8)
-#define VIN2A_D16_DLY_VAL		((0x3 << 5) + 0x2)
-#define VIN2A_D15_DLY_VAL		((0x4 << 5) + 0x0)
-#define VIN2A_D14_DLY_VAL		((0x4 << 5) + 0x0)
+#define RGMII0_TXCTL_DLY_VAL		((0x3 << 5)  0x8)
+#define RGMII0_TXD0_DLY_VAL		((0x3 << 5)  0x8)
+#define RGMII0_TXD1_DLY_VAL		((0x3 << 5)  0x2)
+#define RGMII0_TXD2_DLY_VAL		((0x4 << 5)  0x0)
+#define RGMII0_TXD3_DLY_VAL		((0x4 << 5)  0x0)
+#define VIN2A_D13_DLY_VAL		((0x3 << 5)  0x8)
+#define VIN2A_D17_DLY_VAL		((0x3 << 5)  0x8)
+#define VIN2A_D16_DLY_VAL		((0x3 << 5)  0x2)
+#define VIN2A_D15_DLY_VAL		((0x4 << 5)  0x0)
+#define VIN2A_D14_DLY_VAL		((0x4 << 5)  0x0)
 
 static void cpsw_control(int enabled)
 {
@@ -1010,7 +1089,7 @@ static u64 mac_to_u64(u8 mac[6])
 	int i;
 	u64 addr = 0;
 
-	for (i = 0; i < 6; i++) {
+	for (i = 0; i < 6; i) {
 		addr <<= 8;
 		addr |= mac[i];
 	}
@@ -1030,88 +1109,88 @@ static void u64_to_mac(u64 addr, u8 mac[6])
 
 int board_eth_init(struct bd_info *bis)
 {
-	int ret;
-	uint8_t mac_addr[6];
-	uint32_t mac_hi, mac_lo;
-	uint32_t ctrl_val;
-	int i;
-	u64 mac1, mac2;
-	u8 mac_addr1[6], mac_addr2[6];
-	int num_macs;
-
-	/* try reading mac address from efuse */
-	mac_lo = readl((*ctrl)->control_core_mac_id_0_lo);
-	mac_hi = readl((*ctrl)->control_core_mac_id_0_hi);
-	mac_addr[0] = (mac_hi & 0xFF0000) >> 16;
-	mac_addr[1] = (mac_hi & 0xFF00) >> 8;
-	mac_addr[2] = mac_hi & 0xFF;
-	mac_addr[3] = (mac_lo & 0xFF0000) >> 16;
-	mac_addr[4] = (mac_lo & 0xFF00) >> 8;
-	mac_addr[5] = mac_lo & 0xFF;
-
-	if (!env_get("ethaddr")) {
-		printf("<ethaddr> not set. Validating first E-fuse MAC\n");
-
-		if (is_valid_ethaddr(mac_addr))
-			eth_env_set_enetaddr("ethaddr", mac_addr);
-	}
-
-	mac_lo = readl((*ctrl)->control_core_mac_id_1_lo);
-	mac_hi = readl((*ctrl)->control_core_mac_id_1_hi);
-	mac_addr[0] = (mac_hi & 0xFF0000) >> 16;
-	mac_addr[1] = (mac_hi & 0xFF00) >> 8;
-	mac_addr[2] = mac_hi & 0xFF;
-	mac_addr[3] = (mac_lo & 0xFF0000) >> 16;
-	mac_addr[4] = (mac_lo & 0xFF00) >> 8;
-	mac_addr[5] = mac_lo & 0xFF;
-
-	if (!env_get("eth1addr")) {
-		if (is_valid_ethaddr(mac_addr))
-			eth_env_set_enetaddr("eth1addr", mac_addr);
-	}
-
-	ctrl_val = readl((*ctrl)->control_core_control_io1) & (~0x33);
-	ctrl_val |= 0x22;
-	writel(ctrl_val, (*ctrl)->control_core_control_io1);
-
-	/* The phy address for the AM57xx IDK are different than x15 */
-	if (board_is_am572x_idk() || board_is_am571x_idk() ||
-	    board_is_am574x_idk()) {
-		cpsw_data.slave_data[0].phy_addr = 0;
-		cpsw_data.slave_data[1].phy_addr = 1;
-	}
-
-	ret = cpsw_register(&cpsw_data);
-	if (ret < 0)
-		printf("Error %d registering CPSW switch\n", ret);
-
-	/*
-	 * Export any Ethernet MAC addresses from EEPROM.
-	 * On AM57xx the 2 MAC addresses define the address range
-	 */
-	board_ti_get_eth_mac_addr(0, mac_addr1);
-	board_ti_get_eth_mac_addr(1, mac_addr2);
-
-	if (is_valid_ethaddr(mac_addr1) && is_valid_ethaddr(mac_addr2)) {
-		mac1 = mac_to_u64(mac_addr1);
-		mac2 = mac_to_u64(mac_addr2);
-
-		/* must contain an address range */
-		num_macs = mac2 - mac1 + 1;
-		/* <= 50 to protect against user programming error */
-		if (num_macs > 0 && num_macs <= 50) {
-			for (i = 0; i < num_macs; i++) {
-				u64_to_mac(mac1 + i, mac_addr);
-				if (is_valid_ethaddr(mac_addr)) {
-					eth_env_set_enetaddr_by_index("eth",
-								      i + 2,
-								      mac_addr);
-				}
-			}
-		}
-	}
-
-	return ret;
+	// int ret;
+	// uint8_t mac_addr[6];
+	// uint32_t mac_hi, mac_lo;
+	// uint32_t ctrl_val;
+	// int i;
+	// u64 mac1, mac2;
+	// u8 mac_addr1[6], mac_addr2[6];
+	// int num_macs;
+
+	// /* try reading mac address from efuse */
+	// mac_lo = readl((*ctrl)->control_core_mac_id_0_lo);
+	// mac_hi = readl((*ctrl)->control_core_mac_id_0_hi);
+	// mac_addr[0] = (mac_hi & 0xFF0000) >> 16;
+	// mac_addr[1] = (mac_hi & 0xFF00) >> 8;
+	// mac_addr[2] = mac_hi & 0xFF;
+	// mac_addr[3] = (mac_lo & 0xFF0000) >> 16;
+	// mac_addr[4] = (mac_lo & 0xFF00) >> 8;
+	// mac_addr[5] = mac_lo & 0xFF;
+
+	// if (!env_get("ethaddr")) {
+	// 	printf("<ethaddr> not set. Validating first E-fuse MAC\n");
+
+	// 	if (is_valid_ethaddr(mac_addr))
+	// 		eth_env_set_enetaddr("ethaddr", mac_addr);
+	// }
+
+	// mac_lo = readl((*ctrl)->control_core_mac_id_1_lo);
+	// mac_hi = readl((*ctrl)->control_core_mac_id_1_hi);
+	// mac_addr[0] = (mac_hi & 0xFF0000) >> 16;
+	// mac_addr[1] = (mac_hi & 0xFF00) >> 8;
+	// mac_addr[2] = mac_hi & 0xFF;
+	// mac_addr[3] = (mac_lo & 0xFF0000) >> 16;
+	// mac_addr[4] = (mac_lo & 0xFF00) >> 8;
+	// mac_addr[5] = mac_lo & 0xFF;
+
+	// if (!env_get("eth1addr")) {
+	// 	if (is_valid_ethaddr(mac_addr))
+	// 		eth_env_set_enetaddr("eth1addr", mac_addr);
+	// }
+
+	// ctrl_val = readl((*ctrl)->control_core_control_io1) & (~0x33);
+	// ctrl_val |= 0x22;
+	// writel(ctrl_val, (*ctrl)->control_core_control_io1);
+
+	// /* The phy address for the AM57xx IDK are different than x15 */
+	// if (board_is_am572x_idk() || board_is_am571x_idk() ||
+	//     board_is_am574x_idk()) {
+	// 	cpsw_data.slave_data[0].phy_addr = 0;
+	// 	cpsw_data.slave_data[1].phy_addr = 1;
+	// }
+
+	// ret = cpsw_register(&cpsw_data);
+	// if (ret < 0)
+	// 	printf("Error %d registering CPSW switch\n", ret);
+
+	// /*
+	//  * Export any Ethernet MAC addresses from EEPROM.
+	//  * On AM57xx the 2 MAC addresses define the address range
+	//  */
+	// board_ti_get_eth_mac_addr(0, mac_addr1);
+	// board_ti_get_eth_mac_addr(1, mac_addr2);
+
+	// if (is_valid_ethaddr(mac_addr1) && is_valid_ethaddr(mac_addr2)) {
+	// 	mac1 = mac_to_u64(mac_addr1);
+	// 	mac2 = mac_to_u64(mac_addr2);
+
+	// 	/* must contain an address range */
+	// 	num_macs = mac2 - mac1  1;
+	// 	/* <= 50 to protect against user programming error */
+	// 	if (num_macs > 0 && num_macs <= 50) {
+	// 		for (i = 0; i < num_macs; i) {
+	// 			u64_to_mac(mac1  i, mac_addr);
+	// 			if (is_valid_ethaddr(mac_addr)) {
+	// 				eth_env_set_enetaddr_by_index("eth",
+	// 							      i  2,
+	// 							      mac_addr);
+	// 			}
+	// 		}
+	// 	}
+	// }
+
+	// return ret;
 }
 #endif
 
diff --git a/board/ti/common/board_detect.c b/board/ti/common/board_detect.c
index 8b3b4bc825..2621e870ed 100644
--- a/board/ti/common/board_detect.c
+++ b/board/ti/common/board_detect.c
@@ -289,10 +289,11 @@ int __maybe_unused ti_i2c_eeprom_am_get(int bus_addr, int dev_addr)
 	rc = ti_i2c_eeprom_get(bus_addr, dev_addr, TI_EEPROM_HEADER_MAGIC,
 			       sizeof(am_ep), (uint8_t *)&am_ep);
 	if (rc)
-		return rc;
+		//return rc;
+		strlcpy(ep->name, "BBONE-AI", TI_EEPROM_HDR_NAME_LEN + 1);//return rc;
 
 	ep->header = am_ep.header;
-	strlcpy(ep->name, am_ep.name, TI_EEPROM_HDR_NAME_LEN + 1);
+	//strlcpy(ep->name, am_ep.name, TI_EEPROM_HDR_NAME_LEN + 1);
 	ti_eeprom_string_cleanup(ep->name);
 
 	/* BeagleBone Green '1' eeprom, board_rev: 0x1a 0x00 0x00 0x00 */
@@ -658,25 +659,25 @@ u64 __maybe_unused board_ti_get_emif2_size(void)
 
 void __maybe_unused set_board_info_env(char *name)
 {
-	char *unknown = "unknown";
-	struct ti_common_eeprom *ep = TI_EEPROM_DATA;
+	//char *unknown = "unknown";
+	//struct ti_common_eeprom *ep = TI_EEPROM_DATA;
 
-	if (name)
+	//if (name)
 		env_set("board_name", name);
-	else if (strlen(ep->name) != 0)
+	/*else if (strlen(ep->name) != 0)
 		env_set("board_name", ep->name);
 	else
-		env_set("board_name", unknown);
+		env_set("board_name", unknown);*/
 
-	if (strlen(ep->version) != 0)
-		env_set("board_rev", ep->version);
-	else
-		env_set("board_rev", unknown);
+	//if (strlen(ep->version) != 0)
+		env_set("board_rev", "1"/*ep->version*/);
+	/*else
+		env_set("board_rev", unknown);*/
 
-	if (strlen(ep->serial) != 0)
-		env_set("board_serial", ep->serial);
-	else
-		env_set("board_serial", unknown);
+	//if (strlen(ep->serial) != 0)
+		env_set("board_serial", "1"/*ep->serial*/);
+	/*else
+		env_set("board_serial", unknown);*/
 }
 
 void __maybe_unused set_board_info_env_am6(char *name)
diff --git a/configs/am57xx_evm_defconfig b/configs/am57xx_evm_defconfig
index fbc7315c40..6082b88f0e 100644
--- a/configs/am57xx_evm_defconfig
+++ b/configs/am57xx_evm_defconfig
@@ -17,14 +17,14 @@ CONFIG_ENV_OFFSET_REDUND=0x280000
 CONFIG_SPL_SPI_FLASH_SUPPORT=y
 CONFIG_SPL_SPI_SUPPORT=y
 CONFIG_ARMV7_LPAE=y
-CONFIG_DEFAULT_DEVICE_TREE="am572x-idk"
+CONFIG_DEFAULT_DEVICE_TREE="am5729-beagleboneai"
 CONFIG_AHCI=y
 CONFIG_DISTRO_DEFAULTS=y
 CONFIG_SPL_LOAD_FIT=y
 # CONFIG_USE_SPL_FIT_GENERATOR is not set
 CONFIG_OF_BOARD_SETUP=y
 CONFIG_USE_BOOTARGS=y
-CONFIG_BOOTARGS="androidboot.serialno=${serial#} console=ttyS2,115200 androidboot.console=ttyS2 androidboot.hardware=beagle_x15board"
+CONFIG_BOOTARGS="androidboot.serialno=${serial#} console=ttyS0,115200 androidboot.console=ttyS0 androidboot.hardware=beagle_x15board"
 # CONFIG_USE_BOOTCOMMAND is not set
 CONFIG_SYS_CONSOLE_INFO_QUIET=y
 CONFIG_BOARD_EARLY_INIT_F=y
